package com.golead.dasService.service;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;

public class DataCleanProcess extends Thread {
   
   private static Logger      logger = Logger.getLogger(DataCleanProcess.class);

   private Properties         properties;
   
   private final File[]    fileList;

   public DataCleanProcess(Map<String, Object> initParameters) {
      this.properties = (Properties)initParameters.get("properties");
      Object objFL = initParameters.get("fileList");
      if(objFL != null){
         this.fileList = (File[])objFL;
      } else {
         this.fileList = null;
      }
   }
   
   public void run() {
      logger.info("数据清除开始。");
      cleanFile();
      logger.info("数据清除结束。");
   }
   
   public void DeleteFolder(File file,String path) {
      try{
         // 判断目录或文件是否存在  
         if (file.exists()) {  
             // 判断是否为文件  
             if (file.isFile()) {  // 为文件时调用删除文件方法  
                 deleteFile(file);  
             } else {  // 为目录时调用删除目录方法  
                 deleteDirectory(path);  
             }  
         }  
      }catch(Exception e){
         
      }
  } 
   
   private void cleanFile() {
      for (File file : this.fileList) {
         long time = file.lastModified();
         String ftime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date(time));
         String name = file.getName().split("\\.")[0];
         if(name.equals(ftime)){
            DeleteFolder(file,file.getPath());
         }
      }
   }
   
   public void deleteFile(File file) {  
      // 路径为文件且不为空则进行删除  
      if (file.isFile() && file.exists()) {  
          file.delete();  
      }  
  }
   
   public void deleteDirectory(String path) {  
      try{
         //如果path不以文件分隔符结尾，自动添加文件分隔符  
         if (!path.endsWith(File.separator)) {  
            path = path + File.separator;  
         }  
         File dirFile = new File(path);  
         //如果dir对应的文件不存在，或者不是一个目录，则退出  
         if (!dirFile.exists() || !dirFile.isDirectory()) {  
             throw new Exception("error");
         }  
         //删除文件夹下的所有文件(包括子目录)  
         File[] files = dirFile.listFiles();  
         for (int i = 0; i < files.length; i++) {  
             //删除子文件  
             if (files[i].isFile()) {  
                 deleteFile(files[i]);  
             } //删除子目录  
             else {  
                 deleteDirectory(files[i].getAbsolutePath());  
             }  
         }  
         //删除当前目录  
         dirFile.delete(); 
     }catch(Exception e){
        e.printStackTrace();
     }
   }
}
