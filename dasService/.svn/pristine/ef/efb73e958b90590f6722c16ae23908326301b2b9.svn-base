package com.golead.dasService.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.log4j.Logger;


public class LogTransferProcess extends Thread {
   
   private static Logger      logger = Logger.getLogger(LogTransferProcess.class);

   private Properties         properties;
   
   private FTPClient        ftpClient;
   
   private final String       Day;
   
   private final String       stationID;
   
   public LogTransferProcess(Map<String, Object> initParameters) {
      this.properties = (Properties)initParameters.get("properties");
      this.Day = initParameters.get("Day").toString();
      this.stationID = initParameters.get("stationID").toString();
   }
   
   public void run() {
      logger.info("日志传输开始。");
      try {
         openConnection();

         logTransfer();

         closeConnection();
      }
      catch (Exception e) {
         e.printStackTrace();
         logger.info("日志传输失败。");
      }
      logger.info("日志传输结束。");
   }
   
   public void logTransfer(){
         File file = new File(System.getProperty("user.dir") + File.separator + "log"+ File.separator+"dasService.log."+Day);
         if(file.exists()){
            uploadFile(file.getName(), file);
         }
         String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
         if(today.equals(Day)){
            File file2 = new File(System.getProperty("user.dir") + File.separator + "log"+File.separator +"dasService.log");
            uploadFile(file2.getName()+Day, file2);
         }
   }
   
   private boolean uploadFile(String saveName, File file) {
      BufferedInputStream bis = null;
      boolean res = true;
      try {

         bis = new BufferedInputStream(new FileInputStream(file));
         String upFileName = new String(saveName.getBytes("UTF-8"), "iso-8859-1");
         if (!setupWorkingDirectory(properties.getProperty("companyNo") + File.separator + properties.getProperty("stationID"))) return false;
         if (ftpClient.storeFile(upFileName, bis)) {
            logger.info("文件上传成功：" + file.getName());
         } else {
            logger.error("文件上传失败：" + file.getName());
            res = false;
         }

      } catch (IOException e) {
         logger.error("ftp服务器操作失败。");

      } finally {
         try {
            if (bis != null) bis.close();
         } catch (IOException e) {
            logger.error("ftp服务器操作失败。");
         }
      }
      
      return res;
   }
   
   private void openConnection() {
      String server = properties.getProperty("ftpServer.severIP");
      String port = properties.getProperty("ftpServer.port");
      String userName = properties.getProperty("ftpServer.userName");
      String password = properties.getProperty("ftpServer.password");
      ftpClient = new FTPClient();
      try {
         ftpClient.connect(server, new Integer(port));
         boolean res = ftpClient.login(userName, password);

         if (res) {
            logger.info("ftp服务器已连接。");
            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
         }
         else {
            logger.info("ftp服务器连接失败。");
            ftpClient.disconnect();
            ftpClient = null;
         }
      } catch (SocketException e) {
         logger.error("ftp服务器连接失败。");
         ftpClient = null;
      } catch (IOException e) {
         logger.error("ftp服务器连接失败。");
         ftpClient = null;
      }
   }

   private void closeConnection() {
      try {
         ftpClient.logout();
         ftpClient.disconnect();
         logger.info("ftp服务器已关闭。");
      } catch (IOException e) {
         logger.error("ftp服务器退出错误。");
      }
   }
   
   private boolean setupWorkingDirectory(String workDir) {
      if (ftpClient == null) return false;
      
      workDir = "dasData" + File.separator + workDir;
      boolean res = true;
      try {
         String[] folders = workDir.replaceAll("\\\\", "/").split("/");
         for(String folder : folders){
            res = ftpClient.changeWorkingDirectory(folder);
            if (!res) {
               res = ftpClient.makeDirectory(folder);
               res = ftpClient.changeWorkingDirectory(folder);
               if (!res) {
                  logger.error("ftp服务器操作失败。");
               }
            }
         }

      } catch (IOException e) {
         logger.error("ftp服务器操作失败。");
         res = false;
      }
      
      return res;
   }
}

