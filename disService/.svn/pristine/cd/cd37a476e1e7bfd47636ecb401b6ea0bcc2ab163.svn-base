package com.golead.disService.common.utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Properties;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.log4j.Logger;

import com.golead.disService.common.Constant;

public class FileUtil {
	
	private static Logger logger = Logger.getLogger(FileUtil.class);

	public static Properties loadLatestCollectStatus() {
		return loadProperties(new File(Constant.DIR_DAT + "LatestCollectStatus.properties"));
	}
	
	public static boolean saveLatestCollectStatus(Properties properties) {
		return saveProperties(new File(Constant.DIR_DAT + "LatestCollectStatus.properties"), properties, "");
	}
	
	public static Properties loadDataCfg(String dataCatalogName) {
		return loadProperties(new File(Constant.DIR_DAT + dataCatalogName + Constant.SFX_CFG));
	}
	
	public static boolean saveDataCfg(String dataCatalogName, Properties properties) {
		return saveProperties(new File(Constant.DIR_DAT + dataCatalogName + Constant.SFX_CFG), properties);
	}
	
	public static boolean saveDataCfg(String dataCatalogName, Properties properties, String comments) {
		return saveProperties(new File(Constant.DIR_DAT + dataCatalogName + Constant.SFX_CFG), properties, comments);
	}
	
	public static Properties loadProperties(File file) {
		boolean hasCfg = true;
		Properties prop = new Properties();
		FileInputStream fis = null;

		try {
			if (!file.exists()) {
				hasCfg = file.createNewFile();
			}

			if (hasCfg) {
				fis = new FileInputStream(file);
				prop.load(fis);
			}

		} catch (FileNotFoundException e) {
			logger.error("配置文件" + file.getAbsolutePath() + "读错误。");

		} catch (IOException e) {
			logger.error("配置文件" + file.getAbsolutePath() + "读错误。");

		} finally {
			try {
				if (fis != null) fis.close();
				
			} catch (IOException e) {
				logger.error("配置文件操作错误。");
			}
		}
		
		return prop;
	}
	
	public static boolean saveProperties(File file, Properties properties) {
		return saveProperties(file, properties, null);
	}
	
	public static boolean saveProperties(File file, Properties properties, String comments) {
		boolean res = true;
		FileOutputStream fos = null;

		try {
			if (!file.exists()) {
				file.createNewFile();
			}

			fos = new FileOutputStream(file);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, "GBK"));
			properties.store(bw, comments);
			
		} catch (FileNotFoundException e) {
			logger.error("配置文件" + file.getAbsolutePath() + "写错误。");
			res = false;

		} catch (IOException e) {
			logger.error("配置文件" + file.getAbsolutePath() + "写错误。");
			res = false;

		} finally {
			try {
				if (fos != null) fos.close();
			} catch (IOException e) {
				logger.error("配置文件操作错误。");
			}
		}
		
		return res;
	}
	
	public static String md5File(String path) {
		return md5File(new File(path));
	}
	
	public static String md5File(File file) {
		String res = "";
		try {
			res =  DigestUtils.md5Hex(new FileInputStream(file));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return res;
	}
	
	public static void scanDirectory(String path, scanDirectoryHandller handller) {
		scanDirectory(new File(path), 1, handller);
	}
	
	private static void scanDirectory(File parentDirctory, int depth, scanDirectoryHandller handller) {
		if(depth > handller.getScanDepth()) return;
		if(parentDirctory == null || !parentDirctory.isDirectory()) return;
		
		for(File file : handller.listFile(depth, parentDirctory)) {
			handller.handle(depth, file);
			scanDirectory(file, depth + 1, handller);
		}
	}
	
	public interface scanDirectoryHandller {
		public int getScanDepth();
		public File[] listFile(int depth, File file);
		public void handle(int depth, File file);
	}

}
