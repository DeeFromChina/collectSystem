package com.golead.disService.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;

import com.golead.disManager.util.Util;


public class DataCleanProcess extends Thread{
   
   private static Logger    logger      = Logger.getLogger(DataCleanProcess.class);
   
   private final Properties properties;
   
   public DataCleanProcess(Map<String, Object> initParameters){
      this.properties = (Properties)initParameters.get("properties");
   }
   
   public void run() {
      logger.info("数据清除开始。");
      try {
         cleanFile();
      }
      catch (Exception e) {
         e.printStackTrace();
         logger.info("数据清除失败。");
      }
      logger.info("数据清除结束。");
   }
   
   private void cleanFile() throws Exception{
      String path = properties.get("ftpServer.dasDataDir")==null ? "" : properties.get("ftpServer.dasDataDir").toString();
      File comFiles = new File(path);
      if(!comFiles.exists()){
         logger.info("数据清除失败！");
         return;
      }
      Date today = new Date();
      for(File comFile : comFiles.listFiles()){
         for(File stationFile : comFile.listFiles()){
            if(stationFile.exists()){
               if(today.getTime()-stationFile.lastModified()>30*24*60*60*1000){
                  if(stationFile.isFile()){
                     stationFile.delete();
                  }else{
                     deleteDirectory(stationFile.getPath());
                  }
               }
            }
         }
      }
   }
   
   public void deleteDirectory(String path) {  
      try{
         //如果path不以文件分隔符结尾，自动添加文件分隔符  
         if (!path.endsWith(File.separator)) {  
            path = path + File.separator;  
         }  
         File dirFile = new File(path);  
         //如果dir对应的文件不存在，或者不是一个目录，则退出  
         if (!dirFile.exists() || !dirFile.isDirectory()) {  
             throw new Exception("error");
         }  
         //删除文件夹下的所有文件(包括子目录)  
         File[] files = dirFile.listFiles();  
         for (int i = 0; i < files.length; i++) {  
             //删除子文件  
             if (files[i].isFile()) {  
                 files[i].delete();  
             } //删除子目录  
             else {  
                 deleteDirectory(files[i].getAbsolutePath());  
             }  
         }  
         //删除当前目录  
         dirFile.delete(); 
     }catch(Exception e){
        e.printStackTrace();
     }
   }
}
