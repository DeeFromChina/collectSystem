package com.golead.disManager.ui.composite;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DateTime;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import com.golead.disManager.communication.CommunicationClient;
import com.golead.disManager.communication.CommunicationClientCallback;
import com.golead.disManager.dao.model.Company;
import com.golead.disManager.ui.provider.StationContentProvider;
import com.golead.disManager.ui.provider.StationTableLabelProvider;
import com.golead.disManager.util.Util;

import swing2swt.layout.BorderLayout;

public class StationComposite extends Composite{
   private Shell      shell;
   private Table tblStation;
   private List<Company>                    companies;
   private Map<String, CommunicationClient> commClients;
   private Display                          display;
   private TableViewer                      tbvStation;
   
   public StationComposite(Composite parent, int style) {
      super(parent, style);
      shell = parent.getShell();
      setLayout(new BorderLayout(0, 0));
      
      Composite composite = new Composite(this, SWT.NONE);
      composite.setLayoutData(BorderLayout.NORTH);
      composite.setLayout(new FormLayout());
      
      Label lblCollect = new Label(composite, SWT.NONE);
      lblCollect.setAlignment(SWT.RIGHT);
      FormData fd_lblCollect = new FormData();
      fd_lblCollect.top = new FormAttachment(0, 10);
      fd_lblCollect.bottom = new FormAttachment(100, -10);
      fd_lblCollect.left = new FormAttachment(0, 5);
      fd_lblCollect.width = 100;
      lblCollect.setLayoutData(fd_lblCollect);
      lblCollect.setText("数据采集时间：");

      DateTime dtCollectStart = new DateTime(composite, SWT.BORDER);
      FormData fd_dtCollectStart = new FormData();
      fd_dtCollectStart.top = new FormAttachment(0, 5);
      fd_dtCollectStart.bottom = new FormAttachment(100, -5);
      fd_dtCollectStart.left = new FormAttachment(lblCollect, 5);
      fd_dtCollectStart.width = 100;
      dtCollectStart.setLayoutData(fd_dtCollectStart);

      Label lblNewLabel = new Label(composite, SWT.NONE);
      FormData fd_lblNewLabel = new FormData();
      fd_lblNewLabel.top = new FormAttachment(0, 10);
      fd_lblNewLabel.bottom = new FormAttachment(100, -10);
      fd_lblNewLabel.left = new FormAttachment(dtCollectStart, 0);
      lblNewLabel.setLayoutData(fd_lblNewLabel);
      lblNewLabel.setText("至");

      DateTime dtCollectEnd = new DateTime(composite, SWT.BORDER);
      FormData fd_dtCollectEnd = new FormData();
      fd_dtCollectEnd.top = new FormAttachment(0, 5);
      fd_dtCollectEnd.bottom = new FormAttachment(100, -5);
      fd_dtCollectEnd.left = new FormAttachment(lblNewLabel, 0);
      fd_dtCollectEnd.width = 100;
      dtCollectEnd.setLayoutData(fd_dtCollectEnd);
      
      tbvStation = new TableViewer(composite,  SWT.NONE);
      tblStation = tbvStation.getTable();
      tblStation.setHeaderVisible(true);
      tblStation.setLinesVisible(true);

      TableViewerColumn tblvwcolNo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolNo = tblvwcolNo.getColumn();
      tblcolNo.setWidth(120);
      tblcolNo.setText("加油站编号");

      TableViewerColumn tblvwcolOrg = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolOrg = tblvwcolOrg.getColumn();
      tblcolOrg.setWidth(200);
      tblcolOrg.setText("所属分公司");

      TableViewerColumn tblvwcolStation = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStation = tblvwcolStation.getColumn();
      tblcolStation.setWidth(250);
      tblcolStation.setText("加油站名称");

      TableViewerColumn tblvwcolDate = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolDate = tblvwcolDate.getColumn();
      tblcolDate.setWidth(150);
      tblcolDate.setText("最新传送时间");

      TableViewerColumn tblvwcolStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStatus = tblvwcolStatus.getColumn();
      tblcolStatus.setWidth(100);
      tblcolStatus.setText("连接状态");

      TableViewerColumn tblvwcolMemo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolMemo = tblvwcolMemo.getColumn();
      tblcolMemo.setWidth(600);
      tblcolMemo.setText("说明");

      tbvStation.setContentProvider(new StationContentProvider());
      tbvStation.setLabelProvider(new StationTableLabelProvider());

      Menu popStation = new Menu(tblStation);
      tblStation.setMenu(popStation);

      MenuItem popItemConnect = new MenuItem(popStation, SWT.NONE);
      popItemConnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               commClient = new CommunicationClient(map.get("ip").toString(), new Integer(map.get("port").toString()), new CommunicationClientCallback() {
                  @Override
                  public void command(String source, String message) {
                     deal(source, message);
                  }
               });
               commClient.start();
               commClients.put(map.get("id").toString(), commClient);
            }
            else if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               Util.alert(shell, "提示", "服务器已连接。");
            }
         }
      });
      popItemConnect.setText("连接加油站");

      MenuItem popItemDisconnect = new MenuItem(popStation, SWT.NONE);
      popItemDisconnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            CommunicationClient commClient = commClients.get("192.168.1.116");
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器未连接。");
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               commClient.close();
               commClients.remove("192.168.1.116");
            }
            else {
               Util.alert(shell, "提示", "服务器未连接。");
            }
         }
      });
      popItemDisconnect.setText("断开连接");

      MenuItem menuItem = new MenuItem(popStation, SWT.SEPARATOR);

      MenuItem popItemCommand = new MenuItem(popStation, SWT.NONE);
      popItemCommand.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            CommunicationClient commClient = commClients.get("192.168.1.116");
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器还未连接。");
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               commClient.send("echo");
            }
            else {
               Util.alert(shell, "提示", "服务器还未连接。");
            }
         }
      });
      popItemCommand.setText("命令");
   }
   
   public void load() {
      List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
      Map<String, Object> map1 = new HashMap<String, Object>();
      map1.put("no", "2");
      map1.put("orgName", "郑州分公司");
      map1.put("stationName", "郑州第二加油站");
      map1.put("transDate", "2016-04-29 13:21:34");
      map1.put("status", "已发送");
      map1.put("memo", "说明");
      map1.put("id", 2001);
      map1.put("ip", "192.168.1.116");
      map1.put("port", "15421");
      data.add(map1);
      tbvStation.setInput(data);
   }
   
   private void deal(final String source, final String message) {
      Runnable runThread = new Runnable() {
         public void run() {
            synchronized (this) {
               // txtMessage.setText(source+":"+message);
            }
         }
      };
      display.asyncExec(runThread);
   }
}
