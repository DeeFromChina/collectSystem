package com.golead.disManager.ui.composite;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DateTime;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import swing2swt.layout.BorderLayout;

import com.golead.disManager.communication.CommunicationClient;
import com.golead.disManager.communication.CommunicationClientCallback;
import com.golead.disManager.ui.dialog.ClientDialog;
import com.golead.disManager.ui.dialog.EditGasStationDialog;
import com.golead.disManager.ui.provider.StationContentProvider;
import com.golead.disManager.ui.provider.StationTableLabelProvider;
import com.golead.disManager.util.Util;
import com.golead.disService.filter.NameFilter;

public class UnloadStationComposite extends Composite{
   private Shell      shell;
   private Table tblStation;
   private DateTime dtCollectStart;
   Properties properties = new Properties();
   private Map<String, CommunicationClient> commClients = new HashMap<String, CommunicationClient>();
   private TableViewer                      tbvStation;
   private Map<String, Boolean>       LinkId = new HashMap<String, Boolean>();

   public UnloadStationComposite(Composite parent, int style) {
      super(parent, style);
      shell = parent.getShell();
      setLayout(new BorderLayout(0, 0));
      
      Composite composite = new Composite(this, SWT.NONE);
      composite.setLayoutData(BorderLayout.NORTH);
      composite.setLayout(new FormLayout());
      
      Label lblCollect = new Label(composite, SWT.NONE);
      lblCollect.setAlignment(SWT.RIGHT);
      FormData fd_lblCollect = new FormData();
      fd_lblCollect.top = new FormAttachment(0, 10);
      fd_lblCollect.bottom = new FormAttachment(100, -10);
      fd_lblCollect.left = new FormAttachment(0, 5);
      fd_lblCollect.width = 100;
      lblCollect.setLayoutData(fd_lblCollect);
      lblCollect.setText("加油站编号：");

      dtCollectStart = new DateTime(composite, SWT.BORDER);
      FormData fd_dtCollectStart = new FormData();
      fd_dtCollectStart.top = new FormAttachment(0, 5);
      fd_dtCollectStart.bottom = new FormAttachment(100, -5);
      fd_dtCollectStart.left = new FormAttachment(lblCollect, 5);
      fd_dtCollectStart.width = 130;
      dtCollectStart.setLayoutData(fd_dtCollectStart);

      Button btnSearch = new Button(composite, SWT.NONE);
      btnSearch.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            load();
         }
      });
      FormData fd_btnSearch = new FormData();
      fd_btnSearch.top = new FormAttachment(0, 5);
      fd_btnSearch.bottom = new FormAttachment(100, -5);
      fd_btnSearch.left = new FormAttachment(dtCollectStart, 5);
      btnSearch.setLayoutData(fd_btnSearch);
      btnSearch.setText("    查询    ");
      
      tbvStation = new TableViewer(this, SWT.BORDER | SWT.FULL_SELECTION);
      tblStation = tbvStation.getTable();
      tblStation.setLayoutData(BorderLayout.CENTER);
      tblStation.setHeaderVisible(true);
      tblStation.setLinesVisible(true);
      
      TableViewerColumn tblvwcolOrg = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolOrg = tblvwcolOrg.getColumn();
      tblcolOrg.setWidth(200);
      tblcolOrg.setText("所属分公司");
      
      TableViewerColumn tblvwcolNo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolNo = tblvwcolNo.getColumn();
      tblcolNo.setWidth(120);
      tblcolNo.setText("加油站编号");

      TableViewerColumn tblvwcolStation = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStation = tblvwcolStation.getColumn();
      tblcolStation.setWidth(250);
      tblcolStation.setText("加油站名称");
      
      TableViewerColumn tblvwFileName = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblFileName = tblvwFileName.getColumn();
      tblFileName.setWidth(250);
      tblFileName.setText("文件名称");

      TableViewerColumn tblvwcolDate = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolDate = tblvwcolDate.getColumn();
      tblcolDate.setWidth(150);
      tblcolDate.setText("最新传送时间");

      TableViewerColumn tblvwcolTransStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolTransStatus = tblvwcolTransStatus.getColumn();
      tblcolTransStatus.setWidth(100);
      tblcolTransStatus.setText("传送状态");
      
      TableViewerColumn tblvwcolLoadDate = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolLoadDate = tblvwcolLoadDate.getColumn();
      tblcolLoadDate.setWidth(100);
      tblcolLoadDate.setText("最新加载时间");
      
      TableViewerColumn tblvwcolLoadStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolLoadStatus = tblvwcolLoadStatus.getColumn();
      tblcolLoadStatus.setWidth(100);
      tblcolLoadStatus.setText("加载状态");
      
      TableViewerColumn tblvwcolStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStatus = tblvwcolStatus.getColumn();
      tblcolStatus.setWidth(100);
      tblcolStatus.setText("连接状态");
      
      TableViewerColumn tblvwcolMemo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolMemo = tblvwcolMemo.getColumn();
      tblcolMemo.setWidth(600);
      tblcolMemo.setText("说明");
      
      tbvStation.setContentProvider(new StationContentProvider());
      tbvStation.setLabelProvider(new StationTableLabelProvider());
      
      Menu popStation = new Menu(tblStation);
      tblStation.setMenu(popStation);
      

      MenuItem popEditStation = new MenuItem(popStation, SWT.NONE);
      popEditStation.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            EditGasStationDialog egd = new EditGasStationDialog(shell, SWT.NONE);
            egd.open(map);
            load();
         }
      });
      popEditStation.setText("编辑加油站");
      
      MenuItem popDeleteStation = new MenuItem(popStation, SWT.NONE);
      popDeleteStation.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            deleteStation(map.get("id").toString());
            load();
         }
      });
      popDeleteStation.setText("删除加油站");
      
      MenuItem menuItem2 = new MenuItem(popStation, SWT.SEPARATOR);

      MenuItem popItemConnect = new MenuItem(popStation, SWT.NONE);
      popItemConnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               commClient = new CommunicationClient(map.get("ip").toString(), new Integer(map.get("port").toString()), new CommunicationClientCallback() {
                  @Override
                  public void command(String source, String message) {
//                     deal(source, message);
                  }
               });
               commClient.start();
               commClients.put(map.get("id").toString(), commClient);
               if(commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT){
                  LinkId.put(map.get("id").toString(), true); 
               }else{
                  LinkId.put(map.get("id").toString(), false);
                  commClients.remove(map.get("id").toString());
                  Util.alert(shell, "提示", "服务器不能连接。");
               }
               load();
            }
            else if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               Util.alert(shell, "提示", "服务器已连接。");
               LinkId.put(map.get("id").toString(), true);
               load();
            }
            if(commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT){
               commClients.remove(map.get("id").toString());
               Util.alert(shell, "提示", "服务器不能连接。");
               load();
            }
         }
      });
      popItemConnect.setText("连接加油站");

      MenuItem popItemDisconnect = new MenuItem(popStation, SWT.NONE);
      popItemDisconnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               commClient.close();
               commClients.remove(map.get("id").toString());
               LinkId.put(map.get("id").toString(), false);
               load();
            }
            else {
               Util.alert(shell, "提示", "服务器未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
            }
         }
      });
      popItemDisconnect.setText("断开连接");

      MenuItem menuItem = new MenuItem(popStation, SWT.SEPARATOR);

      MenuItem popItemCommand = new MenuItem(popStation, SWT.NONE);
      popItemCommand.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            tbvStation.getInput();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器还未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               deal(map.get("id").toString(), "321");
//               ClientDialog cd = new ClientDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
//               cd.open(map.get("id").toString(),commClients);
            }
            else {
               Util.alert(shell, "提示", "服务器还未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
            }
         }
      });
      popItemCommand.setText("命令");

   }
   
   public void load(){
      tblStation.removeAll();
      List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
      try {
       long todayStart = Long.valueOf(String.valueOf(dtCollectStart.getYear())+number(dtCollectStart.getMonth()+1)+number(dtCollectStart.getDay())+"000000");
       Properties props = new Properties();
       InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"station.properties"), "UTF-8");
       props.load(inr);
       inr.close();
       inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"config.properties"), "UTF-8");
       properties.load(inr);
       inr.close();
       String filepath = "";
       if(!properties.getProperty("ftpServer.dasDataDir").endsWith(File.separator)){
          filepath = properties.getProperty("ftpServer.dasDataDir")+File.separator;
       }else{
          filepath = properties.getProperty("ftpServer.dasDataDir");
       }
       Collection<Object> c = props.values();
       for(Object object : c){
          Map<String, Object> map = new HashMap<String, Object>();
          String[] message = object.toString().split(";");
          //某个加油站
          String stationId = "";
          String companyNo = "";
          String company = "";
          String name = "";
          String stationNo = "";
          String ip = "";
          String port = "";
          String fileName = "";
          String unZipTime = "";
          companyNo=message[0].replace("CompanyNo:", "");
          company=message[1].replace("CompanyName:", "");
          stationNo=message[2].replace("GasStationNo:", "");
          name=message[3].replace("GasStationName:", "");
          ip=message[4].replace("GasStationIP:", "");
          port=message[5].replace("GasStationPort:", "");
          File stationFile = new File(filepath+companyNo+File.separator+stationNo);
          File[] stationFiles = stationFile.listFiles(new NameFilter(".cfg"));
          if(stationFile.exists()){
             for(File cfgFile : stationFiles){
                //cfg文件
                Properties cfgprops = new Properties();
                InputStreamReader inSR = new InputStreamReader(new FileInputStream(cfgFile.getPath()), "UTF-8");
                cfgprops.load(inSR);
                inSR.close();
                //找到采集时间为以前~今天的cfg
                if(todayStart<=Long.valueOf(cfgprops.getProperty("catalog.endDate").toString()) && todayStart>=Long.valueOf(cfgprops.getProperty("catalog.startDate").toString())){
                   if(cfgprops.get("catalog.status")!=null && !cfgprops.get("catalog.status").toString().equals("finish")){
                      stationId = cfgprops.get("station.id")==null ? "" : cfgprops.get("station.id").toString();
                      fileName = cfgFile.getName();
                      if(props.get(stationId)!=null){
                         //分公司
                         map.put("orgName", company);
                         //名称
                         map.put("stationName", name);
                         //编号
                         map.put("no", stationNo);
                         //文件名称
                         map.put("fileName", fileName);
                         //传送时间
                         String sendTime = cfgprops.get("catalog.sendTime")==null ? "" : cfgprops.get("catalog.sendTime").toString();
                         map.put("transDate", sendTime);
                         
                         String transStatus = "";
                         if(!"".equals(sendTime)){
                            transStatus = "已传送";
                         }
                         //状态
                         map.put("transStatus", transStatus);
                         
                         //加载时间
                         unZipTime = cfgprops.get("catalog.unzip.time") == null ? "" : cfgprops.get("catalog.unzip.time").toString();
                         map.put("loadDate", unZipTime);
                         
                         String loadStatus = "";
                         if("finish".equals(cfgprops.get("catalog.status").toString())){
                            loadStatus = "已加载";
                         }
                         //状态
                         map.put("loadStatus", loadStatus);
                         String linkStatus = "未连接";
                         if(LinkId.get(stationNo)!=null){
                            if(!LinkId.isEmpty() && LinkId.get(stationNo)){
                               linkStatus = "已连接";
                            }
                         }
                         //连接状态
                         map.put("linkStatus", linkStatus);
                         //说明
                         map.put("memo", "说明");
                         //id
                         map.put("id", stationNo);
                         //ip
                         map.put("ip", ip);
                         //port
                         map.put("port", port);
                         //companyNo
                         map.put("companyNo", companyNo);
                         data.add(map);
                         }
                      }else if(cfgprops.get("catalog.status")!=null && cfgprops.get("catalog.status").toString().equals("finish")){
                         map.put("transDate", cfgprops.get("catalog.sendTime").toString());
                      }
                   }
                }
          }
           //不是今天的，列出
             if(map.get("transDate")==null){
                    //分公司
                    map.put("orgName", company);
                    //名称
                    map.put("stationName", name);
                    //编号
                    map.put("no", stationNo);
                    //文件名称
                    map.put("fileName", fileName);
                    //传送时间
                    String sendTime = "";
                    map.put("transDate", sendTime);
                    
                    String transStatus = "";
                    if(!"".equals(sendTime)){
                       transStatus = "已传送";
                    }
                    //状态
                    map.put("transStatus", transStatus);
                    
                    //加载时间
                    map.put("loadDate", "");
                    
                    //状态
                    String loadStatus = "";
                    map.put("loadStatus", loadStatus);
                    
                    //连接状态
                    String linkStatus = "未连接";
                    if(LinkId.get(stationNo)!=null){
                       if(!LinkId.isEmpty() && LinkId.get(stationNo)){
                          linkStatus = "已连接";
                       }
                    }
                    map.put("linkStatus", linkStatus);
                    //说明
                    map.put("memo", "说明");
                    //id
                    map.put("id", stationNo);
                    //ip
                    map.put("ip", ip);
                    //port
                    map.put("port", port);
                  //companyNo
                    map.put("companyNo", companyNo);
                    data.add(map);
                 }
          }
       }catch (Exception e) {
          e.printStackTrace();
       }
      tbvStation.setInput(data);
   }
   
   public void Search(){
      load();
   }
   
   public void SearchForStation(String StationNo, String StationName){
      List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
      try {
         String companyNo = "";
         String companyName = "";
         String ip = "";
         String port = "";
         String fileName = "";
         tblStation.removeAll();
         Properties props = new Properties();
         Properties properties = new Properties();
         InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"station.properties"), "UTF-8");
         props.load(inr);
         inr.close();
         inr =  new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"config.properties"), "UTF-8");
         properties.load(inr);
         inr.close();
         if(!"".equals(StationNo)){
            String code = props.get(StationNo)==null ? "" : props.get(StationNo).toString();
            if("".equals(code)){
               Util.alert(shell, "提示", "找不到该加油站！");
               return;
            }
            String[] codelist = code.split(";");
            companyNo = codelist[0].replace("CompanyNo:", "");
            companyName = codelist[1].replace("CompanyName:", "");
            StationNo = codelist[2].replace("GasStationNo:", "");
            StationName = codelist[3].replace("GasStationName:", "");
            ip = codelist[4].replace("GasStationIP:", "");
            port = codelist[5].replace("GasStationPort:", "");
         }else if("".equals(StationNo) && !"".equals(StationName)){
            Collection<Object> objects = props.values();
            for(Object object :objects){
               String message = object.toString();
               String[] lists = message.split(";");
               if(StationName.equals(lists[3].replace("GasStationName:", ""))){
                  companyNo = lists[0].replace("CompanyNo:", "");
                  companyName = lists[1].replace("CompanyName:", "");
                  StationNo = lists[2].replace("GasStationNo:", "");
                  StationName = lists[3].replace("GasStationName:", "");
                  ip = lists[4].replace("GasStationIP:", "");
                  port = lists[5].replace("GasStationPort:", "");
                  break;
               }
            }
            if("".equals(StationNo)){
               Util.alert(shell, "提示", "找不到该加油站！");
               return;
            }
         }
         
         String filepath = properties.getProperty("ftpServer.dasDataDir");
         if(!filepath.endsWith(File.separator)){
            filepath = filepath + File.separator;
         }
         File[] cfgfiles = new File(filepath+companyNo+File.separator+StationNo).listFiles(new NameFilter(".cfg"));
         String unZipTime = "";
         for(File cfgfile : cfgfiles){
            Map<String, Object> map = new HashMap<String, Object>();
            //cfg文件
            Properties cfgprops = new Properties();
            InputStreamReader inSR = new InputStreamReader(new FileInputStream(cfgfile.getPath()), "UTF-8");
            cfgprops.load(inSR);
            inSR.close();
            //找到采集时间为以前~今天的cfg
               StationNo = cfgprops.get("station.id")==null ? "" : cfgprops.get("station.id").toString();
               fileName = cfgfile.getName();
               if(props.get(StationNo)!=null){
                  //分公司
                  map.put("orgName", companyName);
                  //名称
                  map.put("stationName", StationName);
                  //编号
                  map.put("no", StationNo);
                  //文件名称
                  map.put("fileName", fileName);
                  //传送时间
                  String sendTime = cfgprops.get("catalog.sendTime")==null ? "" : cfgprops.get("catalog.sendTime").toString();
                  map.put("transDate", sendTime);
                  
                  String transStatus = "";
                  if(!"".equals(sendTime)){
                     transStatus = "已传送";
                  }
                  //状态
                  map.put("transStatus", transStatus);
                  
                  //加载时间
                  unZipTime = cfgprops.get("catalog.unzip.time") == null ? "" : cfgprops.get("catalog.unzip.time").toString();
                  map.put("loadDate", unZipTime);
                  
                  String loadStatus = "";
                  if("finish".equals(cfgprops.get("catalog.status").toString())){
                     loadStatus = "已加载";
                  }
                  //状态
                  map.put("loadStatus", loadStatus);
                  String linkStatus = "未连接";
                  if(LinkId.get(StationNo)!=null){
                     if(!LinkId.isEmpty() && LinkId.get(StationNo)){
                        linkStatus = "已连接";
                     }
                  }
                  //连接状态
                  map.put("linkStatus", linkStatus);
                  //说明
                  map.put("memo", "说明");
                  //id
                  map.put("id", StationNo);
                  //ip
                  map.put("ip", ip);
                  //port
                  map.put("port", port);
                  //companyNo
                  map.put("companyNo", companyNo);
                  data.add(map);
               }
            }
            
      }
      catch (Exception e) {
      }
      
      tbvStation.setInput(data);
   }
   
   private String nubmer(int i){
      if(i<10){
         return "0"+String.valueOf(i);
      }
      return String.valueOf(i);
   }
   
   private void findUnload(){
      try {
         tblStation.removeAll();
         Properties stationProps = new Properties();
         Properties props = new Properties();
         InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"station.properties"), "UTF-8");
         stationProps.load(inr);//加油站信息
         inr.close();
         inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"config.properties"), "UTF-8");
         props.load(inr);//config.properties
         inr.close();
         String fileName = props.getProperty("ftpServer.dasDataDir").toString();
         if(!fileName.endsWith(File.separator)){
            fileName = fileName + File.separator;
         }
         //分公司
         File[] fileDir = new File(fileName).listFiles();
         //每一家分公司
         for(File file : fileDir){
            File[] childFiles = new File(file.getPath()).listFiles();
            String company = file.getName();
            //加油站
            for(File childFile : childFiles){
               File[] cfgFiles = new File(childFile.getPath()).listFiles(new com.golead.disService.filter.NameFilter(".cfg"));
               //加油站当天传送信息
               String station = "";
               station = childFile.getName().replace(".cfg", "");
               String no = "";
               no = stationProps.getProperty(station) == null ? "" : stationProps.getProperty(station).toString();
               for(File cfgFile : cfgFiles){
                  Properties cfgProps = new Properties();
                  InputStreamReader inSR = new InputStreamReader(new FileInputStream(cfgFile.getPath()), "UTF-8");
                  cfgProps.load(inSR);
                  inSR.close();
                  String sendTime = "";
                  String sendStatus = "";
                  String loadTime = "";
                  String loadStatus = "";
                     sendTime = cfgProps.getProperty("catalog.sendTime")==null ? "" : cfgProps.get("catalog.sendTime").toString();
                     sendStatus = sendTime == "" ? "" : "已传送";
                     loadTime = "加载时间";
                     loadStatus = "finish".equals(cfgProps.getProperty("catalog.status")) ? "已加载" : "";
                     if(!"finish".equals(loadStatus)){
                        TableItem item = new TableItem(tblStation, SWT.NONE);
                        item.setText(new String[] { no, company, station, sendTime, sendStatus, loadTime, loadStatus});
                     }
               }
            }
         }
      }
      catch (Exception e) {
      }
   }
   
   private void deleteStation(String id){
      FileOutputStream oFile = null;
      try {
         Properties props = new Properties();
         InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + File.separator +"station.properties"), "UTF-8");
         props.load(inr);
         inr.close();
         oFile = new FileOutputStream(System.getProperty("user.dir") + File.separator +"station.properties");
         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(oFile, "UTF-8"));
         props.remove(id);
         props.store(bw, "测试");
         oFile.close();
      }
      catch (Exception e) {
      }
   }
   
   private String number(int i){
      if(i<10){
         return "0"+String.valueOf(i);
      }else{
         return String.valueOf(i);
      }
   }
   
   private void deal(final String source, final String message) {
      Runnable runThread = new Runnable() {
         public void run() {
            synchronized (this) {
               ClientDialog cd = new ClientDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
               cd.open(source,commClients);
            }
         }
      };
      getDisplay().asyncExec(runThread);
   }
}
