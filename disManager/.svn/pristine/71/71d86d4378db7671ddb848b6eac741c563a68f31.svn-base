package com.golead.disManager.ui.composite;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import com.golead.disManager.communication.CommunicationClient;
import com.golead.disManager.communication.CommunicationClientCallback;
import com.golead.disManager.dao.JdbcDao;
import com.golead.disManager.dao.model.Company;
import com.golead.disManager.ui.dialog.ClientDialog;
import com.golead.disManager.ui.dialog.EditGasStationDialog;
import com.golead.disManager.ui.dialog.GasStationDialog;
import com.golead.disManager.ui.dialog.StationDialog;
import com.golead.disManager.ui.provider.StationContentProvider;
import com.golead.disManager.ui.provider.StationTableLabelProvider;
import com.golead.disManager.util.Util;
import com.golead.disService.filter.NameFilter;

import swing2swt.layout.BorderLayout;

public class GasStationComposite extends Composite {
   protected Shell                          shell;
   private Properties                       properties = new Properties();
   private Map<String, CommunicationClient> commClients = new HashMap<String, CommunicationClient>();
   private Table                            tblStation;
   private TableViewer                      tbvStation;
   private Display                          display;
   private Map<String, Boolean>       LinkId = new HashMap<String, Boolean>();
   private boolean       isLink = false;

   public GasStationComposite(Composite parent, int style) {
      super(parent, style);
      shell = parent.getShell();
      setLayout(new BorderLayout(0, 0));
      
      Composite composite = new Composite(this, SWT.NONE);
      composite.setLayoutData(BorderLayout.NORTH);
      composite.setLayout(new FormLayout());
      
      Button btnAdd = new Button(composite, SWT.NONE);
      btnAdd.setText("添加加油站");
      btnAdd.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            GasStationDialog gsd =new GasStationDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
            gsd.open();
            load();
         }
      });
      FormData fd_btnAdd = new FormData();
      fd_btnAdd.top = new FormAttachment(0, 5);
      fd_btnAdd.bottom = new FormAttachment(100, -5);
      fd_btnAdd.left = new FormAttachment(0, 5);
      btnAdd.setLayoutData(fd_btnAdd);

      Button btnEdit = new Button(composite, SWT.NONE);
      btnEdit.setText("编辑加油站");
      btnEdit.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            StationDialog sd =new StationDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
            sd.open();
         }
      });
      FormData fd_btnEdit = new FormData();
      fd_btnEdit.top = new FormAttachment(0, 5);
      fd_btnEdit.bottom = new FormAttachment(100, -5);
      fd_btnEdit.left = new FormAttachment(btnAdd, 5);
      btnEdit.setLayoutData(fd_btnEdit);
      
      Button btnDelete = new Button(composite, SWT.NONE);
      btnDelete.setText("删除加油站");
      btnDelete.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            StationDialog sd =new StationDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
            sd.open();
         }
      });
      FormData fd_btnDelete = new FormData();
      fd_btnDelete.top = new FormAttachment(0, 5);
      fd_btnDelete.bottom = new FormAttachment(100, -5);
      fd_btnDelete.left = new FormAttachment(btnEdit, 5);
      btnDelete.setLayoutData(fd_btnDelete);
      
      tbvStation = new TableViewer(this, SWT.BORDER | SWT.FULL_SELECTION);
      tblStation = tbvStation.getTable();
      tblStation.setSize(50, 50);
      tblStation.setHeaderVisible(true);
      tblStation.setLinesVisible(true);
      
      TableViewerColumn tblvwcolOrg = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolOrg = tblvwcolOrg.getColumn();
      tblcolOrg.setWidth(200);
      tblcolOrg.setText("所属分公司");
      
      TableViewerColumn tblvwcolNo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolNo = tblvwcolNo.getColumn();
      tblcolNo.setWidth(120);
      tblcolNo.setText("加油站编号");

      TableViewerColumn tblvwcolStation = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStation = tblvwcolStation.getColumn();
      tblcolStation.setWidth(250);
      tblcolStation.setText("加油站名称");

      TableViewerColumn tblvwcolDate = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolDate = tblvwcolDate.getColumn();
      tblcolDate.setWidth(150);
      tblcolDate.setText("最新传送时间");

      TableViewerColumn tblvwcolTransStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolTransStatus = tblvwcolTransStatus.getColumn();
      tblcolTransStatus.setWidth(100);
      tblcolTransStatus.setText("传送状态");
      
      TableViewerColumn tblvwcolLoadDate = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolLoadDate = tblvwcolLoadDate.getColumn();
      tblcolLoadDate.setWidth(100);
      tblcolLoadDate.setText("最新加载时间");
      
      TableViewerColumn tblvwcolLoadStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolLoadStatus = tblvwcolLoadStatus.getColumn();
      tblcolLoadStatus.setWidth(100);
      tblcolLoadStatus.setText("加载状态");
      
      TableViewerColumn tblvwcolStatus = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolStatus = tblvwcolStatus.getColumn();
      tblcolStatus.setWidth(100);
      tblcolStatus.setText("连接状态");
      
      TableViewerColumn tblvwcolMemo = new TableViewerColumn(tbvStation, SWT.NONE);
      TableColumn tblcolMemo = tblvwcolMemo.getColumn();
      tblcolMemo.setWidth(600);
      tblcolMemo.setText("说明");
      

      tbvStation.setContentProvider(new StationContentProvider());
      tbvStation.setLabelProvider(new StationTableLabelProvider());

      Menu popStation = new Menu(tblStation);
      tblStation.setMenu(popStation);
      

      MenuItem popEditStation = new MenuItem(popStation, SWT.NONE);
      popEditStation.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            EditGasStationDialog egd = new EditGasStationDialog(shell, SWT.NONE);
            egd.open(map);
            load();
         }
      });
      popEditStation.setText("编辑加油站");
      
      MenuItem popDeleteStation = new MenuItem(popStation, SWT.NONE);
      popDeleteStation.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            deleteStation(map.get("id").toString());
            load();
         }
      });
      popDeleteStation.setText("删除加油站");
      
      MenuItem menuItem2 = new MenuItem(popStation, SWT.SEPARATOR);

      MenuItem popItemConnect = new MenuItem(popStation, SWT.NONE);
      popItemConnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               commClient = new CommunicationClient(map.get("ip").toString(), new Integer(map.get("port").toString()), new CommunicationClientCallback() {
                  @Override
                  public void command(String source, String message) {
                     deal(source, message);
                  }
               });
               commClient.start();
               commClients.put(map.get("id").toString(), commClient);
               LinkId.put(map.get("id").toString(), true);
               load();
            }
            else if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               Util.alert(shell, "提示", "服务器已连接。");
               LinkId.put(map.get("id").toString(), true);
               load();
            }
         }
      });
      popItemConnect.setText("连接加油站");

      MenuItem popItemDisconnect = new MenuItem(popStation, SWT.NONE);
      popItemDisconnect.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               commClient.close();
               commClients.remove(map.get("id").toString());
               LinkId.put(map.get("id").toString(), false);
               load();
            }
            else {
               Util.alert(shell, "提示", "服务器未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
            }
         }
      });
      popItemDisconnect.setText("断开连接");

      MenuItem menuItem = new MenuItem(popStation, SWT.SEPARATOR);

      MenuItem popItemCommand = new MenuItem(popStation, SWT.NONE);
      popItemCommand.addSelectionListener(new SelectionAdapter() {
         @Override
         public void widgetSelected(SelectionEvent e) {
            TableItem[] tableItems = tblStation.getSelection();
            if (tableItems.length == 0) return;
            Map<String, Object> map = (Map<String, Object>) tableItems[0].getData();
            tbvStation.getInput();
            CommunicationClient commClient = commClients.get(map.get("id").toString());
            if (commClient == null) {
               Util.alert(shell, "提示", "服务器还未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
               return;
            }
            if (commClient.getStatus() == CommunicationClient.CONN_STATUS_CONNECT) {
               ClientDialog cd = new ClientDialog(shell, SWT.NONE | SWT.APPLICATION_MODAL);
               cd.open(map.get("id").toString(),commClients);
            }
            else {
               Util.alert(shell, "提示", "服务器还未连接。");
               LinkId.put(map.get("id").toString(), false);
               load();
            }
         }
      });
      popItemCommand.setText("命令");

   }
   
   public void load(){
      tblStation.removeAll();
      List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
      try {
       long todayStart = Long.valueOf(new SimpleDateFormat("yyyyMMdd").format(new Date())+"000000");
       Properties props = new Properties();
       InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + "\\station.properties"), "UTF-8");
       props.load(inr);
       inr.close();
       inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + "\\config.properties"), "UTF-8");
       properties.load(inr);
       inr.close();
       String filepath = "";
       if(!properties.getProperty("ftpServer.dasDataDir").endsWith(File.separator)){
          filepath = properties.getProperty("ftpServer.dasDataDir")+File.separator;
       }else{
          filepath = properties.getProperty("ftpServer.dasDataDir");
       }
       Collection<Object> c = props.values();
       for(Object object : c){
          Map<String, Object> map = new HashMap<String, Object>();
          String[] message = object.toString().split(";");
          //某个加油站
          String stationId = "";
          String companyNo = "";
          String company = "";
          String name = "";
          String stationNo = "";
          String ip = "";
          String port = "";
          companyNo=message[0].replace("CompanyNo:", "");
          company=message[1].replace("CompanyName:", "");
          stationNo=message[2].replace("GasStationNo:", "");
          name=message[3].replace("GasStationName:", "");
          ip=message[4].replace("GasStationIP:", "");
          port=message[5].replace("GasStationPort:", "");
          File stationFile = new File(filepath+message[0]+File.separator+message[2]);
          File[] stationFiles = stationFile.listFiles(new NameFilter(".cfg"));
          if(stationFile.exists()){
             for(File cfgFile : stationFiles){
                //cfg文件
                Properties cfgprops = new Properties();
                InputStreamReader inSR = new InputStreamReader(new FileInputStream(cfgFile.getPath()), "UTF-8");
                cfgprops.load(inSR);
                inSR.close();
                //找到采集时间为以前~今天的cfg
                if(todayStart>=Long.valueOf(cfgprops.getProperty("catalog.endDate").toString())){
                   stationId = cfgprops.get("station.id")==null ? "" : cfgprops.get("station.id").toString();
                   if(props.get(stationId)!=null){
                      //分公司
                      map.put("orgName", company);
                      //名称
                      map.put("stationName", name);
                      //编号
                      map.put("no", stationNo);
                      //传送时间
                      String sendTime = cfgprops.get("catalog.sendTime")==null ? "" : cfgprops.get("catalog.sendTime").toString();
                      map.put("transDate", sendTime);
                      
                      String transStatus = "";
                      if(!"".equals(sendTime)){
                         transStatus = "已传送";
                      }
                      //状态
                      map.put("transStatus", transStatus);
                      
                      //加载时间
                      map.put("loadDate", "加载时间");
                      
                      String loadStatus = "";
                      if("finish".equals(cfgprops.get("catalog.status").toString())){
                         loadStatus = "已加载";
                      }
                      //状态
                      map.put("loadStatus", loadStatus);
                      String linkStatus = "未连接";
                      if(LinkId.get(stationNo)!=null){
                         if(!LinkId.isEmpty() && LinkId.get(stationNo)){
                            linkStatus = "已连接";
                         }
                      }
                      //连接状态
                      map.put("linkStatus", linkStatus);
                      //说明
                      map.put("memo", "说明");
                      //id
                      map.put("id", stationNo);
                      //ip
                      map.put("ip", ip);
                      //port
                      map.put("port", port);
                      //companyNo
                      map.put("companyNo", companyNo);
                      data.add(map);
                   }
                }
             }
          }
         if(map.get("transDate")==null){
                //分公司
                map.put("orgName", company);
                //名称
                map.put("stationName", name);
                //编号
                map.put("no", stationNo);
                //传送时间
                String sendTime = "";
                map.put("transDate", sendTime);
                
                String transStatus = "";
                if(!"".equals(sendTime)){
                   transStatus = "已传送";
                }
                //状态
                map.put("transStatus", transStatus);
                
                //加载时间
                map.put("loadDate", "加载时间");
                
                String loadStatus = "";
                //状态
                map.put("loadStatus", loadStatus);
                String linkStatus = "未连接";
                if(LinkId.get(stationNo)!=null){
                   if(!LinkId.isEmpty() && LinkId.get(stationNo)){
                      linkStatus = "已连接";
                   }
                }
                //连接状态
                map.put("linkStatus", linkStatus);
                //说明
                map.put("memo", "说明");
                //id
                map.put("id", stationNo);
                //ip
                map.put("ip", ip);
                //port
                map.put("port", port);
              //companyNo
                map.put("companyNo", companyNo);
                data.add(map);
             }
          }
       }catch (Exception e) {
       }
      tbvStation.setInput(data);
   }
   
   private void deal(final String source, final String message) {
      Runnable runThread = new Runnable() {
         public void run() {
            synchronized (this) {
            }
         }
      };
      display.asyncExec(runThread);
   }

   private void deleteStation(String id){
      FileOutputStream oFile = null;
      try {
         Properties props = new Properties();
         InputStreamReader inr = new InputStreamReader(new FileInputStream(System.getProperty("user.dir") + "\\station.properties"), "UTF-8");
         props.load(inr);
         inr.close();
         oFile = new FileOutputStream(System.getProperty("user.dir") + "\\station.properties");
         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(oFile, "UTF-8"));
         props.remove(id);
         props.store(bw, "测试");
         oFile.close();
      }
      catch (Exception e) {
      }
   }
}
